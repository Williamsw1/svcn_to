//String Programs-Java and Python
//Reverse a string in Java

// java program to reverse a word

import java.io.*;
import java.util.Scanner;

class GFG {
	public static void main (String[] args) {
		
		String str= "SVCE", nstr="";
		char ch;
		
	System.out.print("Original word: ");
	System.out.println("SVCE"); //Example word
		
	for (int i=0; i<str.length(); i++)
	{
		ch= str.charAt(i); //extracts each character
		nstr= ch+nstr; //adds each character in front of the existing string
	}
	System.out.println("Reversed word: "+ nstr);
	}
}



//Reverse a string in Python using a loop
def reverse(s):
	str = ""
	for i in s:
		str = i + str
	return str

s = "Geeksforgeeks"

print("The original string is : ", end="")
print(s)

print("The reversed string(using loops) is : ", end="")
print(reverse(s))


//Java Program to Count Number of Vowels in a String
// Java Program to Count Number of Vowels
// in a String in a iterative way

import java.io.*;

public class vowel {
	public static void main(String[] args)
		throws IOException
	{
		String str = "SvceCollege";
		str = str.toLowerCase();
		int count = 0;

		for (int i = 0; i < str.length(); i++) {
			// check if char[i] is vowel
			if (str.charAt(i) == 'a' || str.charAt(i) == 'e'
				|| str.charAt(i) == 'i'
				|| str.charAt(i) == 'o'
				|| str.charAt(i) == 'u') {
				// count increments if there is vowel in
				// char[i]
				count++;
			}
		}

		// display total count of vowels in string
		System.out.println(
			"Total no of vowels in string are: " + count);
	}
}


//Python program to count number of vowels using sets in given string

# Python3 code to count vowel in
# a string using set

# Function to count vowel
def vowel_count(str):
	
	# Initializing count variable to 0
	count = 0
	
	# Creating a set of vowels
	vowel = set("aeiouAEIOU")
	
	# Loop to traverse the alphabet
	# in the given string
	for alphabet in str:
	
		# If alphabet is present
		# in set vowel
		if alphabet in vowel:
			count = count + 1
	
	print("No. of vowels :", count)
	
# Driver code
str = "SvcnCollege"

# Function Call
vowel_count(str)


//Substring in Java

// Java code to demonstrate the
// working of substring(int begIndex)
public class Substr1 {
	public static void main(String args[])
	{

		// Initializing String
		String Str = new String("Welcome to svcn college");

	
	
		System.out.print("The extracted substring is : ");
		System.out.println(Str.substring(10));
	}
}

//Python | Check if a Substring is Present in a Given String



# input strings str1 and substr
string = "Svcn college Svcn" # or string=input() -> taking input from the user
substring = "college" # or substring=input()

# splitting words in a given string
s = string.split()

# checking condition
# if substring is present in the given string then it gives output as yes
if substring in s:
	print("yes")
else:
	print("no")

//Count Uppercase, Lowercase, special character and numeric values

// Java program to count the uppercase,
// lowercase, special characters
// and numeric values
import java.io.*;

class Count
{
	public static void main(String args[])
	{
		String str = "#SvCe01fOr@sVc07";
		int upper = 0, lower = 0, number = 0, special = 0;

		for(int i = 0; i < str.length(); i++)
		{
			char ch = str.charAt(i);
			if (ch >= 'A' && ch <= 'Z')
				upper++;
			else if (ch >= 'a' && ch <= 'z')
				lower++;
			else if (ch >= '0' && ch <= '9')
				number++;
			else
				special++;
		}

		System.out.println("Lower case letters : " + lower);
		System.out.println("Upper case letters : " + upper);
		System.out.println("Number : " + number);
		System.out.println("Special characters : " + special);
	}
}

//Python
# Python 3 program to count the uppercase,
# lowercase, special characters
# and numeric values

# Function to count uppercase, lowercase,
# special characters and numbers
def Count(str):
	upper, lower, number, special = 0, 0, 0, 0
	for i in range(len(str)):
		if str[i].isupper():
			upper += 1
		else if str[i].islower():
			lower += 1
		else if str[i].isdigit():
			number += 1
		else:
			special += 1
	print('Upper case letters:', upper)
	print('Lower case letters:', lower)
	print('Number:', number)
	print('Special characters:', special)

# Driver Code
str = "#sVcE01fOr@SvCe07"
Count(str)




//Number of substrings with count of each character as k

// Java program to count number of substrings
// with counts of distinct characters as k.
class substring_prog
{

static int MAX_CHAR = 26;

// Returns true if all values
// in freq[] are either 0 or k.
static boolean check(int freq[], int k)
{
	for (int i = 0; i < MAX_CHAR; i++)
		if (freq[i] !=0 && freq[i] != k)
			return false;
	return true;
}

// Returns count of substrings where frequency
// of every present character is k
static int substrings(String s, int k)
{
	int res = 0; // Initialize result

	// Pick a starting point
	for (int i = 0; i< s.length(); i++)
	{

		// Initialize all frequencies as 0
		// for this starting point
		int freq[] = new int[MAX_CHAR];

		// One by one pick ending points
		for (int j = i; j<s.length(); j++)
		{

			// Increment frequency of current char
			int index = s.charAt(j) - 'a';
			freq[index]++;

			// If frequency becomes more than
			// k, we can't have more substrings
			// starting with i
			if (freq[index] > k)
				break;

			// If frequency becomes k, then check
			// other frequencies as well.
			else if (freq[index] == k &&
				check(freq, k) == true)
				res++;
		}
	}
	return res;
}

// Driver code
public static void main(String[] args)
{
	String s = "aabbcc";
	int k = 2;
	System.out.println(substrings(s, k));

	s = "aabbc";
	k = 2;
	System.out.println(substrings(s, k));
}
}




//In Python
# Python3 program to count number of substrings
# with counts of distinct characters as k.

MAX_CHAR = 26

# Returns true if all values
# in freq[] are either 0 or k.
def check(freq, k):
	for i in range(0, MAX_CHAR):
		if(freq[i] and freq[i] != k):
			return False
	return True

# Returns count of substrings where
# frequency of every present character is k
def substrings(s, k):
	res = 0 # Initialize result

	# Pick a starting point
	for i in range(0, len(s)):

		# Initialize all frequencies as 0
		# for this starting point
		freq = [0] * MAX_CHAR

		# One by one pick ending points
		for j in range(i, len(s)):
			
			# Increment frequency of current char
			index = ord(s[j]) - ord('a')
			freq[index] += 1

			# If frequency becomes more than
			# k, we can't have more substrings
			# starting with i
			if(freq[index] > k):
				break
			
			
			elif(freq[index] == k and
				check(freq, k) == True):
				res += 1
			
	return res

# Driver Code
if __name__ == "__main__":
	s = "aabbcc"
	k = 2
	print(substrings(s, k))

	s = "aabbc";
	k = 2;
	print(substrings(s, k))




